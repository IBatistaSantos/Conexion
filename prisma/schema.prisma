generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  owner         Company?  @relation("CreatorCompany")
  employees     Employee? @relation("EmployeeUser")
  dealCreator   Deal[]    @relation("DealCreator")
  DealUser      Deal[]    @relation("DealUser")
  creatorPerson Person[]  @relation("CreatorPerson")


  @@map("users")
}

model Company {
  id   String @id @default(uuid())
  name String

  ownerId String @unique @map("owner_id")
  owner   User?  @relation(name: "CreatorCompany", fields: [ownerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  employees           Employee[]           @relation("EmployeeCompany")
  invites             InviteEmployee[]     @relation("InviteCompany")
  pipelines           Pipeline[]           @relation("PipelineCompany")
  persons             Person[]             @relation("CompanyPerson")
  products            Product[]            @relation("CompanyProduct")
  vtex_authentication Vtex_Authentication? @relation("VtexAuthenticationCompany")

  @@map("companies")
}

model Employee {
  id     String @id @default(uuid())
  userId String @unique
  user   User?  @relation(name: "EmployeeUser", fields: [userId], references: [id])

  companyId String   @map("company_id")
  company   Company? @relation(name: "EmployeeCompany", fields: [companyId], references: [id])

  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("employees")
}

enum StatusInvite {
  PENDING
  ACCEPTED
  REJECTED
}

model InviteEmployee {
  id    String @id @default(uuid())
  name  String
  email String @unique
  code  String @unique

  companyId String
  company   Company? @relation(name: "InviteCompany", fields: [companyId], references: [id])

  status    StatusInvite @default(PENDING)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @default(now()) @map("updated_at")

  @@map("invite_employees")
}

model Pipeline {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  active      Boolean  @default(true)
  stages      Stage[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  companyId String
  company   Company? @relation(name: "PipelineCompany", fields: [companyId], references: [id])


  @@map("pipelines")
}

model Stage {
  id         String   @id @default(uuid())
  name       String
  pipelineId String
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  deals Deal[] @relation(name: "DealStage")
  integrationOrderVtex Vtex_Authentication? @relation(name: "IntegrationOrderVtexStage")

  @@map("stages")
}

model Deal {
  id    String @id @default(uuid())
  title String

  stageId String
  stage   Stage? @relation(name: "DealStage", fields: [stageId], references: [id])

  creator_id String
  creator    User?  @relation(name: "DealCreator", fields: [creator_id], references: [id])

  userId String
  user   User?  @relation(name: "DealUser", fields: [userId], references: [id])

  personId String? @map("person_id")
  person   Person? @relation(name: "DealPerson", fields: [personId], references: [id])

  productId String? @map("product_id")
  product   Product? @relation(name: "DealProduct", fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")


  @@map("deals")
}

model Person {
  id    String @id @default(uuid())
  name  String
  email String

  owner_id  String @map("ownerId")
  companyId String


  owner   User    @relation(name: "CreatorPerson", fields: [owner_id], references: [id])
  company Company @relation(name: "CompanyPerson", fields: [companyId], references: [id])


  deals Deal[] @relation(name: "DealPerson")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("persons")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  code        String  
  description String?
  category    String

  companyId String
  company   Company @relation(name: "CompanyProduct", fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  prices Price[] @relation(name: "ProductPrice")
  deals Deal[]    @relation(name: "DealProduct")

  @@map("products")
}

model Price {
  id        String   @id @default(uuid())
  price     Float
  currency  String
  cost      Float
  productId String
  product Product @relation(name: "ProductPrice", fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("prices")
}

model Vtex_Authentication {
  id       String @id @default(uuid())
  appKey   String
  appToken String

  companyId String  @unique
  company   Company @relation(name: "VtexAuthenticationCompany", fields: [companyId], references: [id])


  integration_order   Boolean
  integration_product Boolean

  stageId String?
  stage   Stage? @relation(name: "IntegrationOrderVtexStage", fields: [stageId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("vtex_authentications")
}

