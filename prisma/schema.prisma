

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

   owner Company? @relation("CreatorCompany")
   employees Employee? @relation("EmployeeUser")
  @@map("users")
}

model Company {
  id   String @id @default(uuid())
  name String

  ownerId String @map("owner_id") @unique
  owner   User?  @relation(name: "CreatorCompany", fields: [ownerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  employees Employee? @relation("EmployeeCompany")
  invites InviteEmployee? @relation("InviteCompany")
  pipelines Pipeline? @relation("PipelineCompany")

  @@map("companies")
}


model Employee {
  id   String @id @default(uuid())
  userId String
  user   User? @relation(name: "EmployeeUser", fields: [userId], references: [id])

  companyId String @map("company_id")
  company   Company? @relation(name: "EmployeeCompany", fields: [companyId], references: [id])

  active Boolean @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("employees")
}

enum StatusInvite {
  PENDING
  ACCEPTED
  REJECTED
}

model InviteEmployee {
  id   String @id @default(uuid())
  name String
  email String @unique
  code  String @unique

  companyId String
  company   Company? @relation(name: "InviteCompany", fields: [companyId], references: [id])

  status StatusInvite @default(PENDING)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("invite_employees")
}


model Pipeline {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  active      Boolean  @default(true)
  stages      Stage[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  companyId String
  company   Company? @relation(name: "PipelineCompany", fields: [companyId], references: [id])


@@map("pipelines")
}


model Stage {
  id         String   @id @default(uuid())
  name       String
  pipelineId String
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("stages")
}
